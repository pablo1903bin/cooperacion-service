<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.tesoramobil</groupId>
	<artifactId>cooperacion-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>cooperacion-service</name>
	<description>microservice de cooperaciones</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
<properties>
    <java.version>17</java.version>
    <!-- BOM de Spring Cloud: usa el train compatible con tu Spring Boot 3.5.x -->
    <spring-cloud.version>2025.0.0</spring-cloud.version>
</properties>

<dependencies>
    <!-- JPA + Hibernate + HikariCP + transacciones -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Cliente de Spring Cloud Config: permite leer config centralizada desde un Config Server -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>

    <!-- Cliente Eureka (Netflix): registro/descubrimiento de servicios -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    </dependency>

    <!-- OpenFeign: HTTP clients declarativos (interfaces) para llamar a otros microservicios -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>

    <!-- DevTools: reinicio en caliente y utilidades para desarrollo (solo en tiempo de ejecución local) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <scope>runtime</scope>
        <optional>true</optional>
    </dependency>

    <!-- Driver de PostgreSQL (solo en runtime): provee JDBC para conectarse a la DB -->
    <dependency>
        <groupId>org.postgresql</groupId>
        <artifactId>postgresql</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- Lombok: reduce boilerplate (getters/setters/builders). 'provided' para no incluirlo en el jar final -->
    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <!-- Puedes omitir la versión y heredarla del BOM de Spring Boot -->
        <version>1.18.30</version>
        <scope>provided</scope>
    </dependency>

    <!-- SpringDoc OpenAPI UI: expone /swagger-ui.html y /v3/api-docs para tu REST API -->
    <dependency>
        <groupId>org.springdoc</groupId>
        <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
        <version>2.2.0</version>
    </dependency>

    <!-- Spring Cloud Stream con binder de Kafka: modela flujos (bindings) y publica/consume a topics -->
    <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-stream-kafka</artifactId>
    </dependency>

    <!-- Spring for Apache Kafka (nivel “bajo”): @KafkaTemplate, @KafkaListener, Admin, etc.
         Útil si combinas Cloud Stream con APIs nativas de Kafka -->
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>

    <!-- Starter de test (JUnit + AssertJ + Spring Test) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>


    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
 


    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
 


    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
  
</dependencies>

<dependencyManagement>
    <dependencies>
        <!-- BOM de Spring Cloud: alinea versiones de starters cloud -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>${spring-cloud.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<build>
    <finalName>cooperacion-service</finalName>
    <plugins>
        <!-- Plugin de Spring Boot: empaquetado ejecutable, repackage, layers para contenedores -->
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>

<!-- Repos de milestones: solo si realmente necesitas versiones milestone/RC -->
<repositories>
    <repository>
        <id>spring-milestones</id>
        <name>Spring Milestones</name>
        <url>https://repo.spring.io/milestone</url>
        <snapshots>
            <enabled>false</enabled>
        </snapshots>
    </repository>
</repositories>

</project>
